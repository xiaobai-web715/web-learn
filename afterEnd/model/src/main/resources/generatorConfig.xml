<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!--根节点-->
<!--https://blog.csdn.net/isea533/article/details/42102297-->
<generatorConfiguration>
    <!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包-->
<!--    <classPathEntry  location="E:\MySQL\Connector-J-8.0\mysql-connector-j-8.0.31.jar"/>-->
    <classPathEntry  location="D:\MySQL\Connector-J-8.0\mysql-connector-j-8.0.31.jar"/>
    <context id="DB2Tables"  targetRuntime="MyBatis3" defaultModelType="flat">
        <!--<context>元素用于指定生成一组对象的环境。例如指定要连接的数据库，要生成对象的类型和要处理的数据库中的表。-->
        <!--必选属性id用来确定唯一的content元素-->
        <!--
            可选属性:
                defaultModelType: 很重要的属性,这个属性定义了MBG如何生成实体类
                    conditional:这是默认值,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,会将该字段合并到基本实体类中。
                    flat:该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。
                    hierarchical:如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,然后为所有其他的字段生成一个单独的实体类。 MBG会在所有生成的实体类之间维护一个继承关系。
                targetRuntime: 用于指定生成的代码的运行时环境,默认值MyBatis3.
                introspectedColumnImpl: 该参数可以指定扩展org.mybatis.generator.api.IntrospectedColumn该类的实现类。该属性的作用可以查看扩展MyBatis Generator。
        -->
        <commentGenerator>
            <!--MBG生成的代码中可以包含**注释信息**,commentGenerator可以实现-->
            <!--
                可选属性:
                    type: 指定用户的实现类,该属性会有一个默认值 org.mybatis.generator.internal.DefaultCommentGenerator
            -->
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="false"/>
            <!--阻止生成注释包含时间戳,阻止生成注释  true:阻止 false:不阻止-->
        </commentGenerator>
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/lxh?serverTimezone=GMT%2b8&amp;ampuseUnicode=true&amp;characterEncoding=utf-8"
                        userId="root" password="5551340xinghua">
            <!--数据库链接URL，用户名、密码
           1.一般jdbc数据库的版本6.x以上，都是com.mysql.cj.jdbc.Driver  其他的低版本就是com.mysql.cj.jdbc.Driver
         -->
            <!--
                必填属性:
                    driverClass: 访问数据库的JDBC驱动程序的完全限定类名
                    connectionURL: 访问数据库的JDBC连接URL
                可选属性:
                    userId: 用户名
                    password: 密码
            -->
        </jdbcConnection>
        <javaTypeResolver>
            <!--
                用来指定JDBC类型和Java类型如何转换
                可选属性: type提供了默认的属性值
             -->
            <property name="forceBigDecimals" value="false"/>
            <!--
                property 可以配置forceBigDecimals , 该属性可以控制是否强制dectmal与numeric强制转换成Java类型的java.math.BigDecimal
                默认是false
            -->
        </javaTypeResolver>
        <javaModelGenerator targetPackage="com.lxh.mybatis.entity" targetProject="src/main/java">
            <!--
                javaModelGenerator 用来控制生成的实体类 与context的属性defaultModelType配置的属性值相关
                必选属性:
                    targetPackage: 生成实体类存放的包名，一般就是放在该包下。实际还会受到其他配置的影响(<table>中会提到)
                    targetProject: 指定目标项目路径，可以是绝对路径或相对路径
            -->
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
            <!--
                property 支持的属性
                    constructorBased: 该属性只对mybatis3有效, 如果true就会使用构造方法入参，如果false就会使用setter方式。
                    enableSubPackages: MBG会根据catalog和schema来生成子包, 默认为false, 如果false就会直接用targetPackage属性
                    immutable:该属性用来配置实体类属性是否可变，如果设置为true，那么constructorBased不管设置成什么，都会使用构造方法入参，并且         不会生成setter方法。如果为false，实体类属性就可以改变。默认为false。
                    rootClass:设置所有实体类的基类。
                    trimStrings:是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样public void setUsername(String                   username) {this.username = username == null ? null : username.trim();}的setter方法。默认值   false。
            -->
        </javaModelGenerator>
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!-- 生成mapper映射文件的包名和位置-->
            <!--
                sqlMapGenerator:非必选,但有两条规则需要遵循
                    1.如果targetRuntime目标是**iBATIS2**，该元素必须配置一个。
                    2.如果targetRuntime目标是**MyBatis3**，只有当<javaClientGenerator>需要XML时，该元素必须配置一个。 如果没有配置<javaClientGenerator>，则使用以下的规则：
                        如果指定了一个<sqlMapGenerator>，那么MBG将只生成XML的SQL映射文件和实体类。
                        如果没有指定<sqlMapGenerator>，那么MBG将只生成实体类。
            -->
            <property name="enableSubPackages" value="true"/>
            <!--
                支持<property>子元素，只有一个可以配置的属性
                    enableSubPackages:如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false。
            -->
        </sqlMapGenerator>
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.lxh.mybatis.mapper" targetProject="src/main/java">
            <!-- 该元素可选，最多配置一个。如果不配置该元素，就不会生成Mapper接口。-->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <table tableName="hosp_set" domainObjectName="hospSet">
            <!-- 要生成的表  tableName:数据库中的表名或视图名  domainObjectName:实体类名-->
            <!--<table tableName="blog" domainObjectName="Blog"></table>-->
            <!--只有配置的才会生成实体类和其他文件。-->
            <!--
                属性: tableName:指定要生成的表名，可以使用SQL通配符匹配多个表。
            -->
        </table>
        <table tableName="hosp_router" domainObjectName="hospRouter"></table>
    </context>
</generatorConfiguration>
