{
  // "compilerOptions": {
  //   /* Visit https://aka.ms/tsconfig to read more about this file */

  //   /* Projects */
  //   // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
  //   // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
  //   // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
  //   // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
  //   // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
  //   // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

  //   /* Language and Environment */
  //   "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
  //   // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
  //   // "jsx": "preserve",                                /* Specify what JSX code is generated. */
  //   // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
  //   // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
  //   // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
  //   // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
  //   // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
  //   // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
  //   // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
  //   // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
  //   // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

  //   /* Modules */
  //   "module": "commonjs",                                /* Specify what module code is generated. */
  //   // "rootDir": "./",                                  /* Specify the root folder within your source files. */
  //   // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
  //   // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
  //   // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
  //   // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
  //   // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
  //   // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
  //   // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
  //   // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
  //   // "resolveJsonModule": true,                        /* Enable importing .json files. */
  //   // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

  //   /* JavaScript Support */
  //   // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
  //   // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
  //   // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

  //   /* Emit */
  //   // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
  //   // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
  //   // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
  //   // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
  //   // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
  //   // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
  //   // "removeComments": true,                           /* Disable emitting comments. */
  //   // "noEmit": true,                                   /* Disable emitting files from a compilation. */
  //   // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
  //   // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
  //   // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
  //   // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
  //   // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
  //   // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
  //   // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
  //   // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
  //   // "newLine": "crlf",                                /* Set the newline character for emitting files. */
  //   // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
  //   // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
  //   // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
  //   // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
  //   // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
  //   // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

  //   /* Interop Constraints */
  //   // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
  //   // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
  //   "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
  //   // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
  //   "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

  //   /* Type Checking */
  //   "strict": true,                                      /* Enable all strict type-checking options. */
  //   // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
  //   // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
  //   // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
  //   // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
  //   // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
  //   // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
  //   // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
  //   // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
  //   // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
  //   // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
  //   // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
  //   // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
  //   // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
  //   // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
  //   // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
  //   // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
  //   // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
  //   // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

  //   /* Completeness */
  //   // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
  //   "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  // }
  "compilerOptions": {
    "target": "ES2016", // 指定 ECMAScript 版本
    //下面这两行加入后解决了以src/typings/utils文件时 ts校验显示找不到这个文件路径的问题
    "baseUrl": "./",
    "paths": {
      "src": ["./src/"]
    },
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ], // 要包含在编译中的依赖库文件列表
    "allowJs": true, // 允许编译 JavaScript 文件
    // "allowJs": false,
    "skipLibCheck": true, // 跳过所有声明文件的类型检查
    "esModuleInterop": true, // 禁用命名空间引用 (import * as fs from "fs") 启用 CJS/AMD/UMD 风格引用 (import fs from "fs")
    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块进行默认导入
    "strict": true, // 启用所有严格类型检查选项
    "forceConsistentCasingInFileNames": true, // 不允许对同一个文件使用不一致格式的引用
    "module": "esnext", // 指定模块代码生成
    "moduleResolution": "node", // 使用 Node.js 风格解析模块
    "resolveJsonModule": true, // 允许使用 .json 扩展名导入的模块
    "noEmit": false,  //改为false解决TypeScript emitted no output for ...的问题
    // "noEmit": true, // 不输出(意思是不编译代码，只执行类型检查)
    "jsx": "react", // 在.tsx文件中支持JSX
    "sourceMap": true, // 生成相应的.map文件
    "declaration": true, // 生成相应的.d.ts文件
    "noUnusedLocals": true, // 报告未使用的本地变量的错误
    "noUnusedParameters": true, // 报告未使用参数的错误
    "experimentalDecorators": true, // 启用对ES装饰器的实验性支持
    "incremental": true, // 通过从以前的编译中读取/写入信息到磁盘上的文件来启用增量编译
    "noFallthroughCasesInSwitch": true ,
    "outDir": "./",
  },
  "include": [
    "src/**/*.tsx", // *** TypeScript文件应该进行类型检查 ***
    "src/**/*.ts",
  ],
  "exclude": ["node_modules", "dist"] // *** 不进行类型检查的文件 ***
}
